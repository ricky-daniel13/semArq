// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/12/2020 23:00:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder4B
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder4B_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a1;
reg a2;
reg a3;
reg a4;
reg b1;
reg b2;
reg b3;
reg b4;
reg entAcarreo;
// wires                                               
wire s1;
wire s2;
wire s3;
wire s4;
wire salAcarreo;

// assign statements (if any)                          
adder4B i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.entAcarreo(entAcarreo),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.salAcarreo(salAcarreo)
);
initial 
begin 
#1000000 $finish;
end 
endmodule

